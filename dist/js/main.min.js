"use strict";function _slicedToArray(e,t){return _arrayWithHoles(e)||_iterableToArrayLimit(e,t)||_unsupportedIterableToArray(e,t)||_nonIterableRest()}function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _iterableToArrayLimit(e,t){var r=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=r){var o,n,a,c,l=[],i=!0,s=!1;try{if(a=(r=r.call(e)).next,0===t){if(Object(r)!==r)return;i=!1}else for(;!(i=(o=a.call(r)).done)&&(l.push(o.value),l.length!==t);i=!0);}catch(e){s=!0,n=e}finally{try{if(!i&&null!=r.return&&(c=r.return(),Object(c)!==c))return}finally{if(s)throw n}}return l}}function _arrayWithHoles(e){if(Array.isArray(e))return e}function _toConsumableArray(e){return _arrayWithoutHoles(e)||_iterableToArray(e)||_unsupportedIterableToArray(e)||_nonIterableSpread()}function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function _unsupportedIterableToArray(e,t){var r;if(e)return"string"==typeof e?_arrayLikeToArray(e,t):"Map"===(r="Object"===(r=Object.prototype.toString.call(e).slice(8,-1))&&e.constructor?e.constructor.name:r)||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?_arrayLikeToArray(e,t):void 0}function _iterableToArray(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}function _arrayWithoutHoles(e){if(Array.isArray(e))return _arrayLikeToArray(e)}function _arrayLikeToArray(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,o=new Array(t);r<t;r++)o[r]=e[r];return o}var gallerySlider=document.querySelector(".showreel__gallery-img-box"),buttons=document.querySelectorAll("[data-carousel-button]"),galleryBox=document.querySelector(".showreel__gallery-img-box"),accordeon=(buttons.forEach(function(e){e.addEventListener("click",function(){var n="next"===e.dataset.carouselButton?1:-1,a=document.querySelectorAll(".position");a.forEach(function(e,t){var r=gallerySlider.querySelector("[data-slide-".concat(t,"]")),o=_toConsumableArray(a).indexOf(r)+n;(o=o<0?a.length-1:o)>a.length-1&&(o=0),a[o].dataset["slide-".concat(t)]=!0,delete r.dataset["slide-".concat(t)]})})}),window.addEventListener("resize",function(){var e=window.innerWidth/1600;galleryBox.style.transform=1<=e?"scale(1)":"scale(".concat(e,")")}),document.querySelector(".questions__box-lists")),accordeonBtns=document.querySelectorAll(".questions__accordeon-btn");function openAccordeonItems(){this.parentNode.nextElementSibling.classList.contains("show-acc")?(this.parentNode.nextElementSibling.classList.remove("show-acc"),this.classList.remove("active")):(closeAccordeonItems(),this.parentNode.nextElementSibling.classList.toggle("show-acc"),this.classList.toggle("active"))}var closeAccordeonItems=function(){document.querySelectorAll(".questions__accordeon-info").forEach(function(e){return e.classList.remove("show-acc")}),accordeonBtns.forEach(function(e){e.classList.remove("active")})},clickOutsideAccordeon=function(e){e.target.classList.contains("questions__accordeon-btn")||e.target.classList.contains("questions__accordeon-info")||e.target.classList.contains("questions__accordeon-info-text")||closeAccordeonItems()},fromSlider=(accordeonBtns.forEach(function(e){e.addEventListener("click",openAccordeonItems)}),window.addEventListener("click",clickOutsideAccordeon),document.querySelector("#fromSlider")),toSlider=document.querySelector("#toSlider"),fromInput=document.querySelector("#fromInput"),toInput=document.querySelector("#toInput");function controlFromSlider(e,t,r){var o=_slicedToArray(getParsed(e,t),2),n=o[0],o=o[1];fillSlider(e,t,"#C6C6C6","#b60732",t),o<n?(e.value=o,r.innerText="".concat(o," zł")):r.innerText="".concat(n," zł")}function controlToSlider(e,t,r){var o=_slicedToArray(getParsed(e,t),2),n=o[0],o=o[1];fillSlider(e,t,"#C6C6C6","#b60732",t),setToggleAccessible(t),n<=o?(t.value=o,r.innerText="".concat(o," zł")):(r.innerText="".concat(n," zł"),t.value=n)}function getParsed(e,t){return[parseInt(e.value,10),parseInt(t.value,10)]}function fillSlider(e,t,r,o,n){var a=t.max-t.min,e=e.value-t.min,t=t.value-t.min;n.style.background="linear-gradient(\n      to right,\n      ".concat(r," 0%,\n      ").concat(r," ").concat(e/a*100,"%,\n      ").concat(o," ").concat(e/a*100,"%,\n      ").concat(o," ").concat(t/a*100,"%, \n      ").concat(r," ").concat(t/a*100,"%, \n      ").concat(r," 100%)")}function setToggleAccessible(e){var t=document.querySelector("#toSlider");Number(e.value)<=0?t.style.zIndex=2:t.style.zIndex=0}fillSlider(fromSlider,toSlider,"#C6C6C6","#b60732",toSlider),setToggleAccessible(toSlider),fromSlider.oninput=function(){return controlFromSlider(fromSlider,toSlider,fromInput)},toSlider.oninput=function(){return controlToSlider(fromSlider,toSlider,toInput)};var footerYear=document.querySelector(".footer__foot-year"),handleCurrentYear=function(){var e=(new Date).getFullYear();footerYear.innerText=e};handleCurrentYear();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
